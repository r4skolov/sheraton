{"version":3,"file":"app.min.js","mappings":";mBAGe,MAAMA,EAUpBC,WAAAA,EAAY,OACXC,EAAS,2BAA0B,UACnCC,EAAY,4BAA2B,UACvCC,EAAY,UAAS,OACrBC,EAASA,OACR,QACDC,EAAUA,QAEP,CAAC,GACJC,KAAKL,OAAUA,EACfK,KAAKC,QAAU,CACdL,YACAC,YACAC,SACAC,WAGDC,KAAKE,OACN,CAMAA,KAAAA,GACC,MAAMC,EAAcC,SAASC,iBAAiBL,KAAKL,QAC9CQ,IAELA,EAAYG,SAASC,IACpBA,EAAWC,iBAAiB,QAASR,KAAKS,aAAaC,KAAKV,MAAM,IAGnEI,SAASI,iBAAiB,QAASR,KAAKW,oBAAoBD,KAAKV,OAClE,CAMAS,YAAAA,CAAaG,GACZA,EAAEC,iBACF,MAAMC,EAAcF,EAAEG,OAAOC,QAAQhB,KAAKC,QAAQL,WAC7CkB,IAEAA,EAAYG,UAAUC,SAASlB,KAAKC,QAAQJ,WAGhDG,KAAKmB,OAAOL,GAFZd,KAAKoB,MAAMN,GAIb,CAKAH,mBAAAA,GACoBP,SAASC,iBAAiB,GAAGL,KAAKC,QAAQL,aAAaI,KAAKC,QAAQJ,aAC5ES,SAASe,IACdA,EAAUH,SAASI,MAAMP,SAC7Bf,KAAKmB,OAAOE,EACb,GAEF,CAMAD,KAAAA,CAAMN,GACLA,EAAYG,UAAUM,IAAIvB,KAAKC,QAAQJ,WACxBiB,EAAYU,cAAcxB,KAAKL,QACvC8B,aAAa,gBAAiB,QAEjCzB,KAAKC,QAAQH,QAChBE,KAAKC,QAAQH,QAEf,CAMAqB,MAAAA,CAAOL,GACNA,EAAYG,UAAUS,OAAO1B,KAAKC,QAAQJ,WAC3BiB,EAAYU,cAAcxB,KAAKL,QACvC8B,aAAa,gBAAiB,SAEjCzB,KAAKC,QAAQF,SAChBC,KAAKC,QAAQF,SAEf,EC9FD,GAAsB,oBAAX4B,OAAwB,CACjC,IAAIC,EAAqB,CACvB,WAAIC,GACFC,CAEF,GAEFH,OAAOnB,iBAAiB,cAAe,KAAMoB,GAC7CD,OAAOI,oBAAoB,cAAe,KAAMH,EAClD,CAEoC,oBAAXD,QAA0BA,OAAOK,WAAaL,OAAOK,UAAUC,WAAa,iBAAiBC,KAAKP,OAAOK,UAAUC,WAA2C,aAA9BN,OAAOK,UAAUC,UAA2BN,OAAOK,UAAUG,gBCdrN,IAAI1C","sources":["webpack:///./source/js/components/DropPanel.js","webpack:///./node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js","webpack:///./source/js/index.js"],"sourcesContent":["/**\r\n * DropPanel class that allows for creation of dropdown panels\r\n */\r\nexport default class DropPanel {\r\n\t/**\r\n\t * Constructor that sets up the dropdown panel\r\n\t * @param {Object} options - An object containing the options for the dropdown panel\r\n\t * @param {String} options.button - A CSS selector for the button that triggers the dropdown\r\n\t * @param {String} options.container - A CSS selector for the container that holds the dropdown content\r\n\t * @param {String} options.openClass - A CSS class that is added to the container when it is open\r\n\t * @param {Function} options.onOpen - A function that is called when the container is opened\r\n\t * @param {Function} options.onClose - A function that is called when the container is closed\r\n\t */\r\n\tconstructor({\r\n\t\tbutton = '[data-dropdown=\"button\"]',\r\n\t\tcontainer = '[data-dropdown=\"wrapper\"]',\r\n\t\topenClass = 'is-open',\r\n\t\tonOpen = () => {\r\n\t\t},\r\n\t\tonClose = () => {\r\n\t\t},\r\n\t} = {}) {\r\n\t\tthis.button  = button;\r\n\t\tthis.options = {\r\n\t\t\tcontainer,\r\n\t\t\topenClass,\r\n\t\t\tonOpen,\r\n\t\t\tonClose,\r\n\t\t};\r\n\t\t\r\n\t\tthis._init();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initializes the function by adding a click event listener to all\r\n\t * elements with the given button selector.\r\n\t */\r\n\t_init() {\r\n\t\tconst buttonElems = document.querySelectorAll(this.button);\r\n\t\tif (!buttonElems) return;\r\n\t\t\r\n\t\tbuttonElems.forEach((buttonElem) => {\r\n\t\t\tbuttonElem.addEventListener('click', this._handleClick.bind(this));\r\n\t\t});\r\n\t\t\r\n\t\tdocument.addEventListener('click', this._handleClickOutside.bind(this));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Handles a click event on a dropdown button\r\n\t * @param {Object} e - The click event object\r\n\t */\r\n\t_handleClick(e) {\r\n\t\te.preventDefault();\r\n\t\tconst wrapperElem = e.target.closest(this.options.container);\r\n\t\tif (!wrapperElem) return;\r\n\t\t\r\n\t\tif (!wrapperElem.classList.contains(this.options.openClass)) {\r\n\t\t\tthis._open(wrapperElem);\r\n\t\t} else {\r\n\t\t\tthis._close(wrapperElem);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Handles a click event outside of the dropdown panel\r\n\t */\r\n\t_handleClickOutside() {\r\n\t\tconst openPanels = document.querySelectorAll(`${this.options.container}.${this.options.openClass}`);\r\n\t\topenPanels.forEach((openPanel) => {\r\n\t\t\tif (!openPanel.contains(event.target)) {\r\n\t\t\t\tthis._close(openPanel);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Opens the dropdown panel\r\n\t * @param {Object} wrapperElem - The container element that holds the dropdown content\r\n\t */\r\n\t_open(wrapperElem) {\r\n\t\twrapperElem.classList.add(this.options.openClass);\r\n\t\tconst button = wrapperElem.querySelector(this.button);\r\n\t\tbutton.setAttribute('aria-expanded', 'true');\r\n\t\t\r\n\t\tif (this.options.onOpen) {\r\n\t\t\tthis.options.onOpen();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Closes the dropdown panel\r\n\t * @param {Object} wrapperElem - The container element that holds the dropdown content\r\n\t */\r\n\t_close(wrapperElem) {\r\n\t\twrapperElem.classList.remove(this.options.openClass);\r\n\t\tconst button = wrapperElem.querySelector(this.button);\r\n\t\tbutton.setAttribute('aria-expanded', 'false');\r\n\t\t\r\n\t\tif (this.options.onClose) {\r\n\t\t\tthis.options.onClose();\r\n\t\t}\r\n\t}\r\n}\r\n","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// Older browsers don't support event options, feature detect it.\n\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\nvar hasPassiveEvents = false;\nif (typeof window !== 'undefined') {\n  var passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\n\n\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPosition = void 0;\nvar previousBodyPaddingRight = void 0;\n\n// returns true if `el` should be allowed to receive touchmove events.\nvar allowTouchMove = function allowTouchMove(el) {\n  return locks.some(function (lock) {\n    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar preventDefault = function preventDefault(rawEvent) {\n  var e = rawEvent || window.event;\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true;\n  }\n\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n\n  if (e.preventDefault) e.preventDefault();\n\n  return false;\n};\n\nvar setOverflowHidden = function setOverflowHidden(options) {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n    var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n    if (_reserveScrollBarGap && scrollBarGap > 0) {\n      var computedBodyPaddingRight = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'), 10);\n      previousBodyPaddingRight = document.body.style.paddingRight;\n      document.body.style.paddingRight = computedBodyPaddingRight + scrollBarGap + 'px';\n    }\n  }\n\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n  }\n};\n\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight;\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined;\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting;\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined;\n  }\n};\n\nvar setPositionFixed = function setPositionFixed() {\n  return window.requestAnimationFrame(function () {\n    // If previousBodyPosition is already set, don't set it again.\n    if (previousBodyPosition === undefined) {\n      previousBodyPosition = {\n        position: document.body.style.position,\n        top: document.body.style.top,\n        left: document.body.style.left\n      };\n\n      // Update the dom inside an animation frame \n      var _window = window,\n          scrollY = _window.scrollY,\n          scrollX = _window.scrollX,\n          innerHeight = _window.innerHeight;\n\n      document.body.style.position = 'fixed';\n      document.body.style.top = -scrollY;\n      document.body.style.left = -scrollX;\n\n      setTimeout(function () {\n        return window.requestAnimationFrame(function () {\n          // Attempt to check if the bottom bar appeared due to the position change\n          var bottomBarHeight = innerHeight - window.innerHeight;\n          if (bottomBarHeight && scrollY >= innerHeight) {\n            // Move the content further up so that the bottom bar doesn't hide it\n            document.body.style.top = -(scrollY + bottomBarHeight);\n          }\n        });\n      }, 300);\n    }\n  });\n};\n\nvar restorePositionSetting = function restorePositionSetting() {\n  if (previousBodyPosition !== undefined) {\n    // Convert the position from \"px\" to Int\n    var y = -parseInt(document.body.style.top, 10);\n    var x = -parseInt(document.body.style.left, 10);\n\n    // Restore styles\n    document.body.style.position = previousBodyPosition.position;\n    document.body.style.top = previousBodyPosition.top;\n    document.body.style.left = previousBodyPosition.left;\n\n    // Restore scroll\n    window.scrollTo(x, y);\n\n    previousBodyPosition = undefined;\n  }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\n\nvar handleScroll = function handleScroll(event, targetElement) {\n  var clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport var disableBodyScroll = function disableBodyScroll(targetElement, options) {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n    return;\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(function (lock) {\n    return lock.targetElement === targetElement;\n  })) {\n    return;\n  }\n\n  var lock = {\n    targetElement: targetElement,\n    options: options || {}\n  };\n\n  locks = [].concat(_toConsumableArray(locks), [lock]);\n\n  if (isIosDevice) {\n    setPositionFixed();\n  } else {\n    setOverflowHidden(options);\n  }\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY;\n      }\n    };\n    targetElement.ontouchmove = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement);\n      }\n    };\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = true;\n    }\n  }\n};\n\nexport var clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(function (lock) {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n\n    // Reset initial clientY.\n    initialClientY = -1;\n  }\n\n  if (isIosDevice) {\n    restorePositionSetting();\n  } else {\n    restoreOverflowSetting();\n  }\n\n  locks = [];\n};\n\nexport var enableBodyScroll = function enableBodyScroll(targetElement) {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n    return;\n  }\n\n  locks = locks.filter(function (lock) {\n    return lock.targetElement !== targetElement;\n  });\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n  }\n\n  if (isIosDevice) {\n    restorePositionSetting();\n  } else {\n    restoreOverflowSetting();\n  }\n};\n\n","import DropPanel from './components/DropPanel';\r\nimport MainMenu  from './components/MainMenu';\r\n\r\n// Init\r\nfunction init() {\r\n\tnew DropPanel();\r\n}\r\n\r\n(function () {\r\n\tinit();\r\n}());\r\n"],"names":["DropPanel","constructor","button","container","openClass","onOpen","onClose","this","options","_init","buttonElems","document","querySelectorAll","forEach","buttonElem","addEventListener","_handleClick","bind","_handleClickOutside","e","preventDefault","wrapperElem","target","closest","classList","contains","_close","_open","openPanel","event","add","querySelector","setAttribute","remove","window","passiveTestOptions","passive","hasPassiveEvents","removeEventListener","navigator","platform","test","maxTouchPoints"],"sourceRoot":""}